package chartjs.chart

/* ****************************************************************************************************************** *
 *                                                                                                                    *
 *  ! DO NOT EDIT THIS FILE, THE CODE IS GENERATED BY A GRADLE TASK BASED ON THE CSV FILES IN THE RESOURCES FOLDER !  *
 *                                                                                                                    *
 * ****************************************************************************************************************** */

import scala.collection.mutable
import org.scalajs.dom.raw.Event
import org.scalajs.dom.ext.Color
import scala.scalajs.js
import js.annotation._
import js.{JSON, |}
import js.JSConverters._

sealed trait ChartType
object Line extends ChartType { override def toString: String = "line" }
object Bar extends ChartType { override def toString: String = "bar" }

sealed trait Position
object Top extends Position { override def toString: String = "top" }
object Left extends Position { override def toString: String = "left" }
object Bottom extends Position { override def toString: String = "bottom" }
object Right extends Position { override def toString: String = "right" }

sealed trait CapStyle
object Butt extends CapStyle { override def toString: String = "butt" }
object Round extends CapStyle { override def toString: String = "round" }
object Square extends CapStyle { override def toString: String = "square" }

@js.native trait Padding extends js.Object {
  val left: String = js.native
  val right: String = js.native
  val top: String = js.native
  val bottom: String = js.native
}

object Padding {
  def apply(left: String, right: String, top: String, bottom: String): Padding = {
    js.Dynamic.literal(
      left = left,
      right = right,
      top = top,
      bottom = bottom
    ).asInstanceOf[Padding]
  }

  def apply(s: String): Padding = apply(s,s,s,s)

  def apply(p: Int): Padding = apply(p.toString)
}

@js.native trait ChartJs extends js.Object {
  def update(): Unit = js.native
  val data: ChartData = js.native
}

@js.native object Chart extends ChartJs {
  var defaults: js.Any = js.native // FIXME "{"responsive":true,"responsiveAnimationDuration":0,"maintainAspectRatio":true,"events":["mousemove","mouseout","click","touchstart","touchmove"],"hover":{"onHover":null,"mode":"nearest","intersect":true,"animationDuration":400},"onClick":null,"defaultColor":"rgba(0,0,0,0.1)","defaultFontColor":"#666","defaultFontFamily":"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif","defaultFontSize":12,"defaultFontStyle":"normal","showLines":true,"elements":{"arc":{"backgroundColor":"rgba(0,0,0,0.1)","borderColor":"#fff","borderWidth":2},"line":{"tension":0.4,"backgroundColor":"rgba(0,0,0,0.1)","borderWidth":3,"borderColor":"rgba(0,0,0,0.1)","borderCapStyle":"butt","borderDash":[],"borderDashOffset":0,"borderJoinStyle":"miter","capBezierPoints":true,"fill":true},"point":{"radius":3,"pointStyle":"circle","backgroundColor":"rgba(0,0,0,0.1)","borderWidth":1,"borderColor":"rgba(0,0,0,0.1)","hitRadius":1,"hoverRadius":4,"hoverBorderWidth":1},"rectangle":{"backgroundColor":"rgba(0,0,0,0.1)","borderWidth":0,"borderColor":"rgba(0,0,0,0.1)","borderSkipped":"bottom"}},"animation":{"duration":1000,"easing":"easeOutQuart"},"title":{"display":false,"position":"top","fullWidth":true,"fontStyle":"bold","padding":10,"text":""},"legend":{"display":true,"position":"top","fullWidth":true,"reverse":false,"onHover":null,"labels":{"boxWidth":40,"padding":10}},"tooltips":{"enabled":true,"custom":null,"mode":"nearest","position":"average","intersect":true,"backgroundColor":"rgba(0,0,0,0.8)","titleFontStyle":"bold","titleSpacing":2,"titleMarginBottom":6,"titleFontColor":"#fff","titleAlign":"left","bodySpacing":2,"bodyFontColor":"#fff","bodyAlign":"left","footerFontStyle":"bold","footerSpacing":2,"footerMarginTop":6,"footerFontColor":"#fff","footerAlign":"left","yPadding":6,"xPadding":6,"caretSize":5,"cornerRadius":6,"multiKeyBackground":"#fff","displayColors":true,"callbacks":{}}}"
}

@js.native class Chart protected () extends ChartJs {
  def this(canvasId: String, data: ChartParam, options: js.Any = js.undefined) = this()
}




object Palette {
  val col = List(
    Color(158,1,66),
    Color(213,62,79),
    Color(244,109,67),
    Color(253,174,97),
    Color(254,224,139),
    Color(255,255,191),
    Color(230,245,152),
    Color(171,221,164),
    Color(102,194,165),
    Color(50,136,189),
    Color(94,79,162)
  )

  val backGround = Color(0, 0, 0)
}


@js.native trait DataSet extends js.Object {
  var label: String = js.native
  var data: js.Array[js.Any] = js.native
  var fill: Boolean = js.native
  var lineTension: Double = js.native
  var backgroundColor: Color = js.native
  var borderWidth: Int = js.native
  var borderColor: Color = js.native
  var borderCapStyle: CapStyle = js.native
}

object DataSet {
  def apply(label: String , data: js.Array[js.Any] = js.Array(), fill: Boolean = false, lineTension: Double = 0.0, backgroundColor: Color = Palette.backGround, borderWidth: Int = 2, borderColor: Color = Color(0,0,0), borderCapStyle: CapStyle = Round): DataSet = {
    js.Dynamic.literal(
      label = label,
      data = data,
      fill = fill,
      lineTension = lineTension,
      backgroundColor = backgroundColor.toString,
      borderWidth = borderWidth,
      borderColor = borderColor.toString,
      borderCapStyle = borderCapStyle.toString
    ).asInstanceOf[DataSet]
  }
}

@js.native trait AnimationOption extends js.Object {
  var duration:  Int = js.native
  var easing: String = js.native
}

object AnimationOption {
  def apply(duration:  Int  =1000, easing: String  = "easeOutQuart"): AnimationOption = {
    js.Dynamic.literal(
      duration = duration,
      easing = easing
    ).asInstanceOf[AnimationOption]
  }
}

@js.native trait ChartParam extends js.Object {
  var `type`: ChartType = js.native
  var options: ChartOptions = js.native
  var data: ChartData = js.native
}

object ChartParam {
  def apply(`type`: ChartType , options: ChartOptions , data: ChartData = ChartData()): ChartParam = {
    js.Dynamic.literal(
      `type` = `type`.toString,
      options = options,
      data = data
    ).asInstanceOf[ChartParam]
  }
}

@js.native trait LegendLabels extends js.Object {
  var boxWidth: Int = js.native
  var fontSize: Int = js.native
  var fontStyle: String = js.native
  var fontColor: Color = js.native
  var fontFamily: String = js.native
  var padding: Int = js.native
  var generateLabels: (Chart) => Unit = js.native
  var usePointStyle: Boolean = js.native
}

object LegendLabels {
  def apply(boxWidth: Int = 40, fontSize: Int = 12, fontStyle: String = "normal", fontColor: Color = Color("#666"), fontFamily: String = null, padding: Int = 10, generateLabels: (Chart) => Unit  = null, usePointStyle: Boolean = false): LegendLabels = {
    js.Dynamic.literal(
      boxWidth = boxWidth,
      fontSize = fontSize,
      fontStyle = fontStyle,
      fontColor = fontColor.toString,
      fontFamily = fontFamily,
      padding = padding,
      generateLabels = generateLabels,
      usePointStyle = usePointStyle
    ).asInstanceOf[LegendLabels]
  }
}

@js.native trait LegendOption extends js.Object {
  var display: Boolean = js.native
  var position: Position = js.native
  var fullWidth: Boolean = js.native
  var onClick: (Event, js.Object) => Unit = js.native
  var onHover: (Event, js.Object) => Unit = js.native
  var reverse: Boolean = js.native
  var labels: LegendLabels = js.native
}

object LegendOption {
  def apply(display: Boolean = true, position: Position = Top, fullWidth: Boolean = true, onClick: (Event, js.Object) => Unit = null, onHover: (Event, js.Object) => Unit = null, reverse: Boolean = false, labels: LegendLabels = LegendLabels()): LegendOption = {
    js.Dynamic.literal(
      display = display,
      position = position.toString,
      fullWidth = fullWidth,
      onClick = onClick,
      onHover = onHover,
      reverse = reverse,
      labels = labels
    ).asInstanceOf[LegendOption]
  }
}

@js.native trait LayoutOption extends js.Object {
  var padding: Padding = js.native
}

object LayoutOption {
  def apply(padding: Padding = Padding(0)): LayoutOption = {
    js.Dynamic.literal(
      padding = padding
    ).asInstanceOf[LayoutOption]
  }
}

@js.native trait HoverOption extends js.Object {
  var mode: String = js.native
  var intersect: Boolean = js.native
  var animationDuration: Int = js.native
  var onHover: (js.Array[js.Any]) => Unit = js.native
}

object HoverOption {
  def apply(mode: String = "nearest", intersect: Boolean = true, animationDuration: Int = 400, onHover: (js.Array[js.Any]) => Unit = null): HoverOption = {
    js.Dynamic.literal(
      mode = mode,
      intersect = intersect,
      animationDuration = animationDuration,
      onHover = onHover
    ).asInstanceOf[HoverOption]
  }
}

@js.native trait PointElement extends js.Object {

}

object PointElement {
  def apply(): PointElement = {
    js.Dynamic.literal(

    ).asInstanceOf[PointElement]
  }
}

@js.native trait ChartOptions extends js.Object {
  var responsive: Boolean = js.native
  var responsiveAnimationDuration: Int = js.native
  var maintainAspectRatio: Boolean = js.native
  var layout: LayoutOption = js.native
  var title: TitleOption = js.native
  var scales: Scales = js.native
  var legend: LegendOption = js.native
  var tooltips: TooltipOption = js.native
  var hover: HoverOption = js.native
  var elements: ElementOption = js.native
  var animation: AnimationOption = js.native
  var events: Array[String] = js.native
  var onClick: (Chart) => Unit = js.native
  var legendCallback: (Chart) => Unit = js.native
  var onResize:  () => Unit = js.native
}

object ChartOptions {
  def apply(responsive: Boolean = true, responsiveAnimationDuration: Int = 0, maintainAspectRatio: Boolean = true, layout: LayoutOption = LayoutOption(), title: TitleOption = TitleOption(), scales: Scales = Scales(), legend: LegendOption = LegendOption(), tooltips: TooltipOption = TooltipOption(), hover: HoverOption = HoverOption(), elements: ElementOption = ElementOption(), animation: AnimationOption = AnimationOption(), events: Array[String]  = null, onClick: (Chart) => Unit  = null, legendCallback: (Chart) => Unit  = null, onResize:  () => Unit  = null): ChartOptions = {
    js.Dynamic.literal(
      responsive = responsive,
      responsiveAnimationDuration = responsiveAnimationDuration,
      maintainAspectRatio = maintainAspectRatio,
      layout = layout,
      title = title,
      scales = scales,
      legend = legend,
      tooltips = tooltips,
      hover = hover,
      elements = elements,
      animation = animation,
      events = events.toJSArray,
      onClick = onClick,
      legendCallback = legendCallback,
      onResize = onResize
    ).asInstanceOf[ChartOptions]
  }
}

@js.native trait Scales extends js.Object {

}

object Scales {
  def apply(): Scales = {
    js.Dynamic.literal(

    ).asInstanceOf[Scales]
  }
}

@js.native trait TooltipOption extends js.Object {
  var enabled: Boolean = js.native
  var mode: String = js.native
  var intersect: Boolean = js.native
  var position: String = js.native
  var displayColors: Boolean = js.native
  var callbacks: TooltipCallbacks = js.native
}

object TooltipOption {
  def apply(enabled: Boolean = true, mode: String = "nearest", intersect: Boolean = true, position: String = "average", displayColors: Boolean = true, callbacks: TooltipCallbacks = TooltipCallbacks()): TooltipOption = {
    js.Dynamic.literal(
      enabled = enabled,
      mode = mode,
      intersect = intersect,
      position = position,
      displayColors = displayColors,
      callbacks = callbacks
    ).asInstanceOf[TooltipOption]
  }
}

@js.native trait LineElement extends js.Object {

}

object LineElement {
  def apply(): LineElement = {
    js.Dynamic.literal(

    ).asInstanceOf[LineElement]
  }
}

@js.native trait TooltipCallbacks extends js.Object {

}

object TooltipCallbacks {
  def apply(): TooltipCallbacks = {
    js.Dynamic.literal(

    ).asInstanceOf[TooltipCallbacks]
  }
}

@js.native trait ChartData extends js.Object {
  var datasets: js.Array[DataSet] = js.native
  var labels: js.Array[String] = js.native
  var xLabels: js.Array[String] = js.native
  var yLabels: js.Array[String] = js.native
}

object ChartData {
  def apply(datasets: js.Array[DataSet] = js.Array(), labels: js.Array[String] = js.Array(), xLabels: js.Array[String] = js.Array(), yLabels: js.Array[String] = js.Array()): ChartData = {
    js.Dynamic.literal(
      datasets = datasets,
      labels = labels,
      xLabels = xLabels,
      yLabels = yLabels
    ).asInstanceOf[ChartData]
  }
}

@js.native trait RectangleElement extends js.Object {

}

object RectangleElement {
  def apply(): RectangleElement = {
    js.Dynamic.literal(

    ).asInstanceOf[RectangleElement]
  }
}

@js.native trait TitleOption extends js.Object {
  var display: Boolean = js.native
  var position: Position = js.native
  var fullWidth: Boolean = js.native
  var fontSize: Int = js.native
  var fontFamily: String = js.native
  var fontColor: Color = js.native
  var fontStyle: String = js.native
  var padding: Int = js.native
  var text: String = js.native
}

object TitleOption {
  def apply(display: Boolean = false, position: Position = Top, fullWidth: Boolean = true, fontSize: Int = 12, fontFamily: String = null, fontColor: Color = Color("#666"), fontStyle: String = "bold", padding: Int = 10, text: String = ""): TitleOption = {
    js.Dynamic.literal(
      display = display,
      position = position.toString,
      fullWidth = fullWidth,
      fontSize = fontSize,
      fontFamily = fontFamily,
      fontColor = fontColor.toString,
      fontStyle = fontStyle,
      padding = padding,
      text = text
    ).asInstanceOf[TitleOption]
  }
}

@js.native trait ArcElement extends js.Object {

}

object ArcElement {
  def apply(): ArcElement = {
    js.Dynamic.literal(

    ).asInstanceOf[ArcElement]
  }
}

@js.native trait ElementOption extends js.Object {
  var arc: ArcElement = js.native
  var line: LineElement = js.native
  var point: PointElement = js.native
  var rectangle: RectangleElement = js.native
}

object ElementOption {
  def apply(arc: ArcElement = ArcElement(), line: LineElement = LineElement(), point: PointElement = PointElement(), rectangle: RectangleElement = RectangleElement()): ElementOption = {
    js.Dynamic.literal(
      arc = arc,
      line = line,
      point = point,
      rectangle = rectangle
    ).asInstanceOf[ElementOption]
  }
}

@js.native trait LineChartOptions extends ChartOptions {
  var showLines: Boolean = js.native
  var spanGaps: Boolean = js.native
}

object LineChartOptions {
  def apply(showLines: Boolean = true, spanGaps: Boolean = false): LineChartOptions = {
    js.Dynamic.literal(
      showLines = showLines,
      spanGaps = spanGaps
    ).asInstanceOf[LineChartOptions]
  }
}

